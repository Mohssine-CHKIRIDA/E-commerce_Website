generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  name          String
  email         String   @unique
  password      String
  role          Role     @default(USER)
  orders        Order[]
  reviews       Review[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}

model Product {
  id           Int       @id @default(autoincrement())
  name         String
  description  String
  price        Float
  imageUrl     String
  category     Category  @relation(fields: [categoryId], references: [id])
  categoryId   Int
  subcategory  String
  brand        String
  inStock      Int
  rating       Float     @default(0)
  numReviews   Int       @default(0)
  reviews      Review[]
  orderItems   OrderItem[]
  colors       ProductColor[]
  sizes        ProductSize[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model ProductColor {
  id        Int      @id @default(autoincrement())
  name      String
  bgColor   String
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
}

model ProductSize {
  id        Int      @id @default(autoincrement())
  size      Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Float
  comment   String?
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id            Int         @id @default(autoincrement())
  user          User       @relation(fields: [userId], references: [id])
  userId        Int
  items         OrderItem[]
  totalAmount   Float
  status        OrderStatus @default(PENDING)
  paymentIntent String?    // Stripe payment intent ID
  paymentStatus PaymentStatus @default(PENDING)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  price     Float    // Price at time of purchase
  color     String?
  size      Int?
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}
